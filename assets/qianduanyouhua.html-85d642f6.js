import{_ as n,o as a,c as s,b as t}from"./app-e86357c7.js";const p="/noniBlog/assets/PO-7549de5c.png",e={},o=t(`<h1 id="前端优化" tabindex="-1"><a class="header-anchor" href="#前端优化" aria-hidden="true">#</a> 前端优化</h1><p>面试的时候问到了，回答得一般般，在这里总结一些，持续更新……</p><h2 id="首屏优化" tabindex="-1"><a class="header-anchor" href="#首屏优化" aria-hidden="true">#</a> 首屏优化</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><h4 id="首屏时间" tabindex="-1"><a class="header-anchor" href="#首屏时间" aria-hidden="true">#</a> 首屏时间</h4><p>首屏时间FCP（First Contentful Paint）：浏览器从响应用户输入网址地址，到首屏内容渲染完成的时间。</p><p><strong>影响因素：</strong></p><ul><li>网络延迟</li><li>资源文件体积大</li><li>资源重复请求加载</li><li>加载脚本过程中渲染堵塞</li></ul><p><strong>计算方式：</strong></p><p>首屏时间 = 首屏内容渲染结束时间点 - 开始请求的时间点</p><p>首屏时间的结束点一般认为是第一屏绘制完，因为无法直接得到时间点，所以需要获得第一屏内容底部位置，即首屏线，而计算方式也各不相同。</p><h5 id="标记首屏标签模块" tabindex="-1"><a class="header-anchor" href="#标记首屏标签模块" aria-hidden="true">#</a> <strong>标记首屏标签模块</strong></h5><p>通过在HTML文档中，在首屏线的位置添加脚本去获取这个位置的时间。</p><p><strong>代码实现：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    window<span class="token punctuation">.</span>pageStartTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    window<span class="token punctuation">.</span>firstPaint <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>第一屏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span>firstScreen <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首屏时间 = window.firstScreen - window.pageStartTime</p><p><strong>适用场景：</strong></p><ul><li>首屏内不需要拉取数据，否则可能拿到首屏线获取时间的时候，首屏还是空白</li><li>不需要考虑图片加载，只考虑首屏主要模块</li></ul><p>在业务中，较少使用这种算法，大多数页面需要使用接口，所以这种方法就太不常用</p><p>但是如果你的页面是静态页面，或者异步数据不影响整体的首屏体验，那么就可以使用这种办法</p><h5 id="统计首屏最慢图片加载时间" tabindex="-1"><a class="header-anchor" href="#统计首屏最慢图片加载时间" aria-hidden="true">#</a> 统计首屏最慢图片加载时间</h5><p>拿到首屏内所有的图片，遍历它们，逐个监听图片标签的onload事件，并收集到它们的加载时间，取最大值。</p><p><strong>代码实现：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>统计首屏最慢图片加载时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    window<span class="token punctuation">.</span>pageStartTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span>firstScreen <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 首屏时间</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>firstScreen <span class="token operator">-</span> window<span class="token punctuation">.</span>pageStartTime<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首屏时间 = window.firstScreen - window.pageStartTime</p><p><strong>适用场景：</strong></p><p>首屏元素数量固定的页面，比如移动端首屏不论屏幕大小都展示相同数量的内容。</p><h5 id="自定义模块计算法" tabindex="-1"><a class="header-anchor" href="#自定义模块计算法" aria-hidden="true">#</a> 自定义模块计算法</h5><p>这种算法和标记首屏的方法相似，同样忽略了首屏内图片加载的情况，这个方法主要考虑的是异步数据。</p><p>在首屏标签标记法中，是无法计算到异步数据带来的首屏空白的，所以它的适配场景十分有限</p><p>自定义模块，就是根据首屏内接口计算比较得出最迟的时间</p><p><strong>代码实现：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>自定义模块计算法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    window<span class="token punctuation">.</span>pageStartTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>第一屏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 假设这里异步加载首屏要显示的文章列表数据</span>
      window<span class="token punctuation">.</span>firstScreen <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首屏时间 = window.firstScreen - window.pageStartTime</p><h5 id="window-performance获取首屏时间" tabindex="-1"><a class="header-anchor" href="#window-performance获取首屏时间" aria-hidden="true">#</a> <strong>window.performance获取首屏时间</strong></h5><p><code>window.performance</code>能够获取到相应的时间节点，支持IE9以上浏览器。</p><p>首屏时间 = performance.getEntriesByName(“first-contentful-paint”)[0].startTime - navigationStart</p><blockquote><p>navigationStart：同一个浏览器上一个页面卸载(unload)结束时的时间戳。如果没有上一个页面，这个值会和fetchStart相同</p></blockquote><h4 id="白屏时间" tabindex="-1"><a class="header-anchor" href="#白屏时间" aria-hidden="true">#</a> 白屏时间</h4><p>白屏时间FP（First Paint）：是指浏览器从响应用户输入网址地址，到浏览器开始显示内容的时间。</p><p><strong>影响因素：</strong></p><ul><li>网络</li><li>服务端性能</li><li>前端页面结构设计</li></ul><p><strong>计算方式：</strong></p><p>白屏时间 = 页面开始展示的时间点 - 开始请求的时间点</p><p>通常认为浏览器开始渲染<code>&lt;body&gt;</code>或者解析完<code>&lt;head&gt;</code>的时间是白屏结束的时间点。所以我们可以在html文档的head中所有的<strong>静态资源</strong>以及<strong>内嵌脚本/样式</strong>的<strong>前面</strong>记录一个时间点，在head<strong>最底部</strong>记录另一个时间点，两者的<strong>差值</strong>作为白屏时间。</p><p><strong>代码实现：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    window<span class="token punctuation">.</span>pageStartTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    window<span class="token punctuation">.</span>firstPaint <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\`白屏时间：$<span class="token punctuation">{</span><span class="token punctuation">}</span>\`<span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>白屏时间= window.firstPaint - window.pageStartTime</p><p>缺点：无法获取解析HTML文档之前的时间信息。</p><h3 id="优化手段" tabindex="-1"><a class="header-anchor" href="#优化手段" aria-hidden="true">#</a> 优化手段</h3><p><img src="`+p+`" alt="图片"></p><p>根据图片把几个点拿出来说说</p><h4 id="页面渲染部分" tabindex="-1"><a class="header-anchor" href="#页面渲染部分" aria-hidden="true">#</a> 页面渲染部分</h4><h5 id="css放顶部-js放尾部" tabindex="-1"><a class="header-anchor" href="#css放顶部-js放尾部" aria-hidden="true">#</a> CSS放顶部，JS放尾部</h5><p>CSS和JS都会阻塞页面的渲染，如果这些文件要加载和解析很久的话，页面就会呈现空白，也就是我们常说的白屏问题。</p><p>CSS放头部：因为如果先加载HTML再去加载CSS，会让用户第一时间看到页面是没有样式的，网站会很丑陋，用户体验会很不友好。</p><p>当然其实JS也可以放头部：只要给它加上defer或者async属性就可以了，异步下载，延迟执行。</p><p>关于 defer 与 async 区别：</p><ul><li><code>script</code> ：加载和执行是同步、顺序的，没有兼容性问题，但会阻塞DOM的渲染，可能会导致长时间的白屏。</li><li><code>script defer</code>：异步下载，延迟执行，会等整个页面都解析完毕后执行，延迟的脚本是有顺序的，但有兼容性问题。</li><li><code>script async</code>：异步下载，延迟执行，但不保证等整个页面解析完毕后再执行，它是乱序的，这也比较适用百度或者谷歌分析这类不依赖其他脚本的库，有兼容性问题。</li></ul><h5 id="使用webworker-⭐" tabindex="-1"><a class="header-anchor" href="#使用webworker-⭐" aria-hidden="true">#</a> 使用webworker ⭐</h5><p>web worker是运行在后台的js，独立于其他脚本，不会影响页面的性能。并且通过postMessage将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。</p><h5 id="长任务分片执行-⭐" tabindex="-1"><a class="header-anchor" href="#长任务分片执行-⭐" aria-hidden="true">#</a> 长任务分片执行 ⭐</h5><p>时间分片的原理是基于 JavaScript 的事件循环机制。在传统的事件循环中，当 JavaScript 引擎执行一个任务时，会一直占用主线程，直到任务执行完成。这可能导致长时间运行的任务阻塞主线程，影响页面的响应性。</p><p>时间分片通过将长时间运行的任务切分为多个小任务，并在每个小任务之间让出主线程，使得浏览器有机会处理其他任务和用户交互。通过将任务划分为小片段，时间分片可以在每个小任务之间进行上下文切换，从而提高页面的响应性。可以使用 <code>setTimeout</code> 或者 <code>requestAnimationFrame</code> 来实现类似的时间分片效果。</p><h5 id="降低css选择器的复杂性" tabindex="-1"><a class="header-anchor" href="#降低css选择器的复杂性" aria-hidden="true">#</a> 降低CSS选择器的复杂性</h5><p>浏览器读取选择器，遵循的原则是从选择器的右边到左边读取。看个示例：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#block .text p</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>查找所有 P 元素。</li><li>查找结果 1 中的元素是否有类名为 text 的父元素</li><li>查找结果 2 中的元素是否有 id 为 block 的父元素</li></ol><p>CSS 选择器优先级</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>内联 <span class="token operator">&gt;</span> ID选择器 <span class="token operator">&gt;</span> 类选择器 <span class="token operator">&gt;</span> 标签选择器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据以上两个信息可以得出结论：</p><ol><li>减少嵌套。后代选择器的开销是最高的，因此我们应该尽量将选择器的深度降到最低（最高不要超过三层），尽可能使用类来关联每一个标签元素</li><li>关注可以通过继承实现的属性，避免重复匹配重复定义</li><li>尽量使用高优先级的选择器，例如 ID 和类选择器。</li><li>避免使用通配符，只对需要用到的元素进行选择</li></ol><h4 id="资源优化部分" tabindex="-1"><a class="header-anchor" href="#资源优化部分" aria-hidden="true">#</a> 资源优化部分</h4><h5 id="代码拆分" tabindex="-1"><a class="header-anchor" href="#代码拆分" aria-hidden="true">#</a> 代码拆分</h5><p>代码分割是一种将代码分割成多个小块的方式，然后按需加载或并行加载所需的块的技术。代码分割可以用于减少应用程序的初始加载时间或将代码切割成可按需加载的块，从而减少应用程序所需的总体代码量。如使用import；在react中使用React.lazy、React Router分割。</p><h5 id="预加载-⭐" tabindex="-1"><a class="header-anchor" href="#预加载-⭐" aria-hidden="true">#</a> 预加载 ⭐</h5><p>preload 提供了一种声明式的命令，让<strong>浏览器提前加载指定资源</strong>(加载后并不执行)，在需要执行的时候再执行。提供的好处主要是：</p><ul><li>将加载和执行分离开，可不阻塞渲染和 document 的 onload 事件</li><li>提前加载指定资源</li></ul><p>使用：</p><ul><li>link标签<code>&lt;link rel=&quot;preload&quot; href=&quot;/path/to/style.css&quot; as=&quot;style&quot;&gt;</code></li><li>使用 HTTP 响应头的 Link 字段创建<code>Link: &lt;https://example.com/other/styles.css&gt;; rel=preload; as=style </code></li></ul><h6 id="preload-和-prefetch" tabindex="-1"><a class="header-anchor" href="#preload-和-prefetch" aria-hidden="true">#</a> preload 和 prefetch：</h6><ul><li>preload 是告诉浏览器页面<strong>必定</strong>需要的资源，浏览器<strong>一定会</strong>加载这些资源；</li><li>prefetch 是告诉浏览器页面<strong>可能</strong>需要的资源，浏览器<strong>不一定会</strong>加载这些资源。</li></ul><h4 id="浏览器优化部分" tabindex="-1"><a class="header-anchor" href="#浏览器优化部分" aria-hidden="true">#</a> 浏览器优化部分</h4><h5 id="减少http请求次数-⭐" tabindex="-1"><a class="header-anchor" href="#减少http请求次数-⭐" aria-hidden="true">#</a> 减少HTTP请求次数 ⭐</h5><ul><li><strong>合并请求</strong></li></ul><p>如使用雪碧图，把多个小图合并到一张大图里，就不需要分开请求所有小图</p><ul><li><strong>合并JS与CSS</strong></li></ul><p>利用项目构建工具，如gulp, grunt, webpack等等，都可以做到JS或者CSS文件的压缩，合并</p><ul><li><strong>充分利用浏览器缓存</strong></li></ul><p>如果图片或者脚本，样式文件内容比较固定，不经常被修改，那么，尽可能利用缓存技术，减少HTTP请求次数或文件下载次数；也可以利用localStorage</p><h5 id="提高http请求响应速度-⭐" tabindex="-1"><a class="header-anchor" href="#提高http请求响应速度-⭐" aria-hidden="true">#</a> 提高HTTP请求响应速度 ⭐</h5><ul><li><strong>使用内容分发网络（CDN）</strong></li></ul><p>CDN是位于世界各地的服务器网络。CDN在您的网站上缓存静态资源，然后用户访问您的网页时，将其提供给缓存的内容。缓存的内容是从服务器交付的，最接近用户的物理位置。 是否要使用CDN取决于几件事，最重要的是您的流量是本地流量还是国际流量。如果您的大多数网站访问者是本地访问者，则不需要内容交付网络（CDN加速）</p><ul><li><strong>dns-prefetch 预解析技术</strong></li></ul><p><code>dns-prefetch</code>(<strong>DNS预获取</strong>)是前端网络性能优化的一种措施。它根据浏览器定义的规则，<strong>提前解析</strong>之后可能会用到的域名，使解析结果<strong>缓存到系统缓存</strong>中，<strong>缩短DNS解析时间</strong>，进而提高网站的访问速度。</p><p>当DNS解析的时候，需要经过以下流程：</p><ul><li>浏览器缓存</li><li>系统缓存</li><li>路由器缓存</li><li>ISP(运营商)DNS缓存</li><li>根域名服务器</li><li>顶级域名服务器</li><li>主域名服务器</li></ul><p>才能拿到IP地址，<code>dns-prefetch</code>就是在<strong>将解析后的IP缓存在系统中</strong>。</p><p>这样，<code>dns-prefetch</code>就有效地缩短了DNS解析时间。因为，在本地操作系统做了DNS缓存，使得DNS在解析的过程中，<strong>提前在系统缓存中找到了对应IP</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;dns-prefetch&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;https://baidu.com/&quot;</span><span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="spa单页应用首屏加载速度优化" tabindex="-1"><a class="header-anchor" href="#spa单页应用首屏加载速度优化" aria-hidden="true">#</a> SPA单页应用首屏加载速度优化</h3><p>关于SPA单页应用首屏加载速度的优化可以使用以下几种常见方案</p><h4 id="常见方案举例" tabindex="-1"><a class="header-anchor" href="#常见方案举例" aria-hidden="true">#</a> <strong>常见方案举例：</strong></h4><ul><li>减小入口文件体积</li><li>静态资源本地缓存</li><li>UI框架按需加载</li><li>图片资源的压缩</li><li>组件重复打包</li><li>开启GZip压缩</li><li>使用SSR</li></ul><h5 id="_1、减小入口文件体积" tabindex="-1"><a class="header-anchor" href="#_1、减小入口文件体积" aria-hidden="true">#</a> 1、减小入口文件体积</h5><p><strong>路由懒加载：<strong>把</strong>不同路由对应的组件</strong>分割成<strong>不同的代码块</strong>，当路由被请求的时候<strong>单独打包路由</strong>，使得入口文件变小，提升加载速度</p><p>实现路由懒加载可以在<code>vue-router</code>配置路由的使用，采取<strong>动态加载路由</strong>的方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span> 
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;Blogs&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ShowBlogs&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/ShowBlogs.vue&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>以函数的形式加载路由</strong>，这样就可以把各自的路由文件分别打包，只有在解析给定的路由时，才会加载路由组件</p><h5 id="_2、静态资源本地缓存" tabindex="-1"><a class="header-anchor" href="#_2、静态资源本地缓存" aria-hidden="true">#</a> 2、静态资源本地缓存</h5><p>后端返回资源问题：</p><ul><li>采用<code>HTTP</code>缓存，设置<code>Cache-Control</code>，<code>Last-Modified</code>，<code>Etag</code>等响应头</li><li>采用<code>Service Worker</code>离线缓存</li></ul><p>前端合理利用<code>localStorage</code></p><h5 id="_3、ui框架按需加载" tabindex="-1"><a class="header-anchor" href="#_3、ui框架按需加载" aria-hidden="true">#</a> 3、UI框架按需加载</h5><p>在日常使用<code>UI</code>框架，例如<code>element-UI</code>、或者<code>antd</code>，我们经常性直接引用整个<code>UI</code>库</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">&#39;element-ui&#39;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以按需引入，按需加载需要的组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Button<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> Pagination<span class="token punctuation">,</span> Table<span class="token punctuation">,</span> TableColumn<span class="token punctuation">,</span> MessageBox <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-ui&#39;</span><span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Input<span class="token punctuation">)</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Pagination<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、组件重复打包" tabindex="-1"><a class="header-anchor" href="#_4、组件重复打包" aria-hidden="true">#</a> 4、组件重复打包</h5><p>假设<code>A.js</code>文件是一个常用的库，现在有多个路由使用了<code>A.js</code>文件，这就造成了重复下载</p><p>解决方案：在<code>webpack</code>的<code>config</code>文件中，修改<code>CommonsChunkPlugin</code>的配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>minChunks</code>为3表示会把使用3次及以上的包抽离出来，放进公共依赖文件，避免了重复加载组件</p><h5 id="_5、图片资源的压缩" tabindex="-1"><a class="header-anchor" href="#_5、图片资源的压缩" aria-hidden="true">#</a> 5、图片资源的压缩</h5><p>图片资源虽然不在编码过程中，但它却是对页面性能影响最大的因素</p><p>**图片：**进行适当的压缩图片资源</p><p><strong>icon：</strong></p><ul><li>使用在线字体图标</li><li>使用雪碧图，将众多小图标合并到同一张图上，用以减轻<code>http</code>请求压力。</li></ul><h5 id="_6、开启gzip压缩-⭐" tabindex="-1"><a class="header-anchor" href="#_6、开启gzip压缩-⭐" aria-hidden="true">#</a> 6、开启GZip压缩 ⭐</h5><p>拆完包之后，我们再用<code>gzip</code>做一下压缩 安装<code>compression-webpack-plugin</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>cnmp i compression<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<code>vue.congig.js</code>中引入并修改<code>webpack</code>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> CompressionPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;compression-webpack-plugin&#39;</span><span class="token punctuation">)</span>

<span class="token function-variable function">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 为生产环境修改配置...</span>
            config<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">&#39;production&#39;</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$|\\.html$|\\.css</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">//匹配文件名</span>
                    <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span> <span class="token comment">//对超过10k的数据进行压缩</span>
                    <span class="token literal-property property">deleteOriginalAssets</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">//是否删除原文件</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在服务器我们也要做相应的配置 如果发送请求的浏览器支持<code>gzip</code>，就发送给它<code>gzip</code>格式的文件 我的服务器是用<code>express</code>框架搭建的 只要安装一下<code>compression</code>就能使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> compression <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;compression&#39;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">compression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 在其他中间件使用之前调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7、使用ssr-⭐" tabindex="-1"><a class="header-anchor" href="#_7、使用ssr-⭐" aria-hidden="true">#</a> 7、使用SSR ⭐</h5><p>SSR（Server side ），也就是服务端渲染，组件或页面通过服务器生成html字符串，再发送到浏览器</p><p>从头搭建一个服务端渲染是很复杂的，<code>vue</code>应用建议使用<code>Nuxt.js</code>实现服务端渲染</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><p>https://blog.csdn.net/Hampton_Chen/article/details/115761889</p><p>https://blog.csdn.net/qq_40655485/article/details/111907042</p><p>https://zhuanlan.zhihu.com/p/88639980?utm_source=wechat_session</p>`,142),c=[o];function l(i,u){return a(),s("div",null,c)}const d=n(e,[["render",l],["__file","qianduanyouhua.html.vue"]]);export{d as default};
