import{_ as s,o as n,c as a,b as t}from"./app-5d3b9327.js";const e={},p=t(`<h2 id="html中的javascript" tabindex="-1"><a class="header-anchor" href="#html中的javascript" aria-hidden="true">#</a> HTML中的JavaScript</h2><h3 id="script-元素" tabindex="-1"><a class="header-anchor" href="#script-元素" aria-hidden="true">#</a> <code>&lt;script&gt; </code>元素</h3><h4 id="_8个属性" tabindex="-1"><a class="header-anchor" href="#_8个属性" aria-hidden="true">#</a> 8个属性</h4><p><strong>src</strong>：可选。表示包含要执行的代码的外部文件。</p><p><strong>async</strong>：可选。异步执行脚本。表示应该<strong>立即开始</strong>下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对<strong>外部脚本文件</strong>有效。异步脚本保证会在页面的load事件前执行，但可能会在DOMContentLoaded之前或之后。</p><p><strong>defer</strong>：可选。表示脚本可以<strong>延迟到文档完全被解析和显示之后再执行</strong>（推迟窒执行脚本）。只对<strong>外部脚本文件</strong>有效。 在IE7及更早的版本中，对行内脚本也可以指定这个属性。在实际当中，推迟执行的脚本不一定总会按顺序执行或者在DOMContentLoaded 事件之前执行，因此最好只包含一个这样的脚本。</p><blockquote><p>async与defer都可以并行加载 JS 脚本，在页面解析的同时也可以加载脚本。</p><p>区别：</p><p>1、多个async脚本不能保证加载顺序，多个defer脚本按出现顺序加载</p><p>2、async中脚本加载完后立即执行（执行时页面解析暂停），defer等所有元素解析完后才会执行。总结：<strong>defer</strong>是“渲染完再执行”，<strong>async</strong>是“下载完就执行”。</p><p>使用：</p><p><code>&lt;script defer&gt;</code> 、<code>&lt;script async&gt;</code></p></blockquote><p><strong>charset</strong>：可选。使用 src 属性指定的代码字符集。大多数浏览器不在乎它的值。</p><p><strong>crossorigin</strong>：可选。配置相关请求的CORS（跨源资源共享）设置。默认不使用CORS。crossorigin= &quot;anonymous&quot;配置文件请求不必设置凭据标志。crossorigin=&quot;use-credentials&quot;设置凭据 标志，意味着出站请求会包含凭据。</p><p><strong>integrity</strong>：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI， Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错， 脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提 供恶意内容。</p><p><strong>type</strong>：可选。代替language，表示代码块中<strong>脚本语言的内容类型</strong>（也称MIME类型）。按照惯例，这个值始终都是&quot;text/javascript&quot;，尽管&quot;text/javascript&quot;和&quot;text/ecmascript&quot; 都已经废弃了。JavaScript文件的 MIME类型通常是&quot;application/x-javascript&quot;，不过给 type 属性这个值有可能导致脚本被忽略。在非 IE 的浏览器中有效的其他值还有 &quot;application/javascript&quot;和&quot;application/ecmascript&quot;。如果这个值是 module，则代 码会被当成ES6模块，而且只有这时候代码中才能出现import和export关键字。</p><p><strong>language</strong>：废弃。最初用于表示代码块中的脚本语言（如&quot;JavaScript&quot;、&quot;JavaScript 1.2&quot; 或&quot;VBScript&quot;）。大多数浏览器都会忽略这个属性，不应该再使用它。</p><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h4><p>使用<code>&lt;script&gt;</code>的方式有两种：通过它直接在网页中嵌入JavaScript代码，以及通过它在网页中包含外部JavaScript文件。</p><p>页面嵌入：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  
 <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hi!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 <span class="token punctuation">}</span> 
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>网页引入外部JS：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;example.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="关于src" tabindex="-1"><a class="header-anchor" href="#关于src" aria-hidden="true">#</a> 关于src</h4><p>使用了 src 属性的<code>&lt;script&gt;</code>元素不应该再在该标签中再包含其他 JavaScript 代码。如果两者都提供的话，则浏览器只会下载并执行脚本文件，从而忽略行内代码。</p><p>跟<code>&lt;img&gt;</code>元素很像，<code>&lt;script&gt;</code>元素的 src 属性可以是一个完整的 URL，而且这个URL指向的资源可以跟包含它的HTML页面不在同一个域中，比如这个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;http://www.somewhere.com/afile.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>浏览器在解析这个资源时，会向src属性指定的路径发送一个GET请求，以取得相应资源，假定是一个JavaScript文件。这个初始的请求不受浏览器同源策略限制(仍然受父页面HTTP/HTTPS协议的限制)，但返回并被执行的JavaScript则受限制。</p><p>来自外部域的代码会被当成加载它的页面的一部分来加载和解释。这个能力可以让我们通过不同的域分发JavaScript。不过，引用了放在别人服务器上的JavaScript文件时要格外小心，因为恶意的程序员 随时可能替换这个文件。在包含外部域的JavaScript文件时，要确保该域是自己所有的，或者该域是一个可信的来源。</p><h4 id="标签位置" tabindex="-1"><a class="header-anchor" href="#标签位置" aria-hidden="true">#</a> 标签位置</h4><p>放<code>&lt;head&gt;</code>里：JS代码会先被下载、解析，等完成后才开始渲染页面，即才开始解析<code>&lt;body&gt;</code>。这对于有很多JS的页面会导致页面<strong>渲染延迟明显</strong>，在此期间浏览器窗口空白。</p><p>放<code>&lt;body&gt;</code>里：页面会在处理JS之前完全渲染页面，用户会感觉页面加载变快，因为浏览器显示空白的时间变短。</p><h4 id="动态加载脚本" tabindex="-1"><a class="header-anchor" href="#动态加载脚本" aria-hidden="true">#</a> 动态加载脚本</h4><p>通过DOM API的方式：创建<code>script</code>元素并添加到DOM中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;gibberish.js&#39;</span><span class="token punctuation">;</span> 
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，这种方式创建的<code>&lt;script&gt;</code>元素是以异步方式加载的，相当于添加了async属性，但是因为不是所有浏览器都支持该属性，因此可以通过明确设置为同步加载的方式来统一动态脚本的加载行为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;gibberish.js&#39;</span><span class="token punctuation">;</span> 
script<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> 
document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以这种方式获取的资源对浏览器预加载器是不可见的，这会严重影响它们在资源获取队列中的优先级。 根据应用程序的工作方式以及使用方式，这种方式可能会严重影响性能。要想让预加载器知道这些动态请求文件的存在，可以在文档头部显式声明它们：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">&quot;preload&quot;</span> href<span class="token operator">=</span><span class="token string">&quot;gibberish.js&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="行内代码与外部文件" tabindex="-1"><a class="header-anchor" href="#行内代码与外部文件" aria-hidden="true">#</a> 行内代码与外部文件</h3><p>一般推荐把JS代码放到外部文件中，推荐理由：</p><ul><li><p><strong>可维护性</strong>。JavaScript 代码如果分散到很多 HTML页面，会导致维护困难。而用一个目录保存 所有JavaScript文件，则更容易维护，这样开发者就可以独立于使用它们的HTML页面来编辑 代码。</p></li><li><p><strong>缓存 ---- 页面加载更快</strong>。浏览器会根据特定的设置缓存所有外部链接的JavaScript文件，这意味着如果两个页面都用到同一个文件，则该文件只需下载一次，页面加载更快。</p></li><li><p><strong>适应未来</strong>。包含外部JavaScript文件的语法在HTML和XHTML中是一样的。</p></li></ul><h3 id="文档模式" tabindex="-1"><a class="header-anchor" href="#文档模式" aria-hidden="true">#</a> 文档模式</h3><p>IE5.5 发明了文档模式的概念，即可以使用doctype切换文档模式。最初的文档模式有两种：<strong>混杂模式</strong>（quirks mode）和<strong>标准模式</strong>（standards mode）。前者让IE像IE5一样（支持一些非标准的特性）， 后者让IE具有兼容标准的行为。</p><p>虽然这两种模式的主要区别只体现在通过CSS渲染的内容方面，但对 JavaScript 也有一些关联影响，或称为副作用。</p><p>随着浏览器的普遍实现，又出现了第三种文档模式：<strong>准标准模式</strong>（almost standards mode）。这种模式下的浏览器支持很多标准的特性，但是没有标准规定得那么严格。主要区别在于如何对待图片元素周围的空白（在表格中使用图片时最明显）。</p><h4 id="开启方式" tabindex="-1"><a class="header-anchor" href="#开启方式" aria-hidden="true">#</a> 开启方式</h4><p>混杂模式在所有浏览器中都以省略文档开头的doctype 声明作为开关。这种约定并不合理，因为混杂模式在不同浏览器中的差异非常大，不使用黑科技基本上就没有浏览器一致性可言。</p><p>标准模式通过下列几种文档类型声明开启：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML 4.01 Strict --&gt;</span> 
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> 
<span class="token string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span><span class="token punctuation">&gt;</span></span> 
<span class="token comment">&lt;!-- XHTML 1.0 Strict --&gt;</span> 
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> 
<span class="token string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> 
<span class="token string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span><span class="token punctuation">&gt;</span></span> 
<span class="token comment">&lt;!-- HTML5 --&gt;</span> 
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准标准模式通过过渡性文档类型（Transitional）和框架集文档类型（Frameset）来触发：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML 4.01 Transitional --&gt;</span> 
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> 
<span class="token string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> 
<span class="token string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span class="token punctuation">&gt;</span></span> 
<span class="token comment">&lt;!-- HTML 4.01 Frameset --&gt;</span> 
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> 
<span class="token string">&quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot;</span> 
<span class="token string">&quot;http://www.w3.org/TR/html4/frameset.dtd&quot;</span><span class="token punctuation">&gt;</span></span> 
<span class="token comment">&lt;!-- XHTML 1.0 Transitional --&gt;</span> 
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> 
<span class="token string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> 
<span class="token string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span><span class="token punctuation">&gt;</span></span> 
<span class="token comment">&lt;!-- XHTML 1.0 Frameset --&gt;</span> 
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> 
<span class="token string">&quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;</span> 
<span class="token string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="noscript-元素" tabindex="-1"><a class="header-anchor" href="#noscript-元素" aria-hidden="true">#</a> <code>&lt;noscript&gt;</code> 元素</h3><p>该元素给被用于给不支持 JavaScript 的浏览器提供替代内容。虽然如今的浏览器已经 100%支持 JavaScript，但对于禁用JavaScript的浏览器来说，这个元素仍然有它的用处。</p><p>在下列两种情况下，浏览器将显示包含在<code>&lt;noscript&gt;</code> 中的内容（任一条件满足即显示，否则不显示）：</p><ul><li>浏览器不支持脚本</li><li>浏览器对脚本的支持被关闭</li></ul><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><ul><li>要包含外部JavaScript文件，必须将 src 属性设置为要包含文件的URL。文件可以跟网页在同 一台服务器上，也可以位于完全不同的域。</li><li>所有<code>&lt;script&gt;</code>元素会依照它们在网页中出现的次序被解释。在不使用defer和async 属性的情况下，包含在<code>&lt;script&gt;</code>元素中的代码必须严格按次序解释。</li><li>对不推迟执行的脚本，浏览器必须解释完位于<code>&lt;script&gt;</code>元素中的代码，然后才能继续渲染页面的剩余部分。为此通常<code>&lt;script&gt;</code>元素放到页面尾部，介于主内容之后、<code>&lt;/body&gt;</code>之前</li><li>可以使用defer属性把脚本推迟到文档渲染完后再执行。推迟的脚本原则上按照出现顺序执行。</li><li>可以使用async属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照它们再页面中出现的次序执行。</li><li>使用<code>&lt;noscript&gt;</code> 元素可以再禁用JS的情况显示该标签内的内容。</li></ul>`,53),o=[p];function c(i,r){return n(),a("div",null,o)}const d=s(e,[["render",c],["__file","2-1.html.vue"]]);export{d as default};
