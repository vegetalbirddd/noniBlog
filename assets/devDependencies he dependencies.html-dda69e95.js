import{_ as e,o as d,c as n,b as c}from"./app-1e4bf7d3.js";const o={},s=c('<h1 id="devdependencies-和-dependencies" tabindex="-1"><a class="header-anchor" href="#devdependencies-和-dependencies" aria-hidden="true">#</a> devDependencies 和 dependencies</h1><p>​ 一般我们把项目代码拉下来的时候，需要执行<code>npm install</code>来安装依赖，这个指令将会默认安装了<code>dependencies</code> 字段和 <code>devDependencies</code> 字段中的所有模块，通常我们会认为<code>dependencies</code>放置的是<strong>运行项目时</strong>所需要的依赖包，<code>devDependencies</code>放置的是<strong>开发项目时</strong>所使用的依赖包。</p><p>​</p><h2 id="dependencies" tabindex="-1"><a class="header-anchor" href="#dependencies" aria-hidden="true">#</a> dependencies</h2><p>​ 假设我们现在在项目中需要引入一个包名为A的组件库，那么我们便可以执行<code>npm install A</code>指令，那么该组件库依赖包的<code>dependencies</code>会被下载，而<code>devDependencies</code>不会被下载。</p><p>​ 由此我们可以知道，当一个依赖需要被<code>src</code>源码使用时，会被放到 <code>dependencies</code>中，在进行 <code>npm install 包名</code>的时候会自动把 <code>dependencies</code> 安装上。</p><h2 id="devdependencies" tabindex="-1"><a class="header-anchor" href="#devdependencies" aria-hidden="true">#</a> devDependencies</h2><p>​ 当在开发一个项目时，需要使用webpack、babel等，这些依赖只需要在该项目开发的过程或测试过程中使用，那么就写在<code>devDependencies</code>。即当一个依赖包在仅开发时候的使用，不需要被引入到<code>src</code>中，那么就放到<code>devDependencies</code>里。简而言之，就是某些依赖不需要被打包进项目中，就放在<code>devDependencies</code> 里。</p><p>​ 如果该项目被发布到npm的时候，其他人引入了该项目时，不会安装<code>devDependencies</code>上的依赖。</p><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h2><h3 id="什么时候需要明显区分" tabindex="-1"><a class="header-anchor" href="#什么时候需要明显区分" aria-hidden="true">#</a> 什么时候需要明显区分？</h3><p>​ 开发的项目要发布npm包提供给外部、其他业务项目使用的，需要非常注意依赖的安装地方，因为搞不好很容易在业务使用中会出现bug。</p><h3 id="为什么要明显区分" tabindex="-1"><a class="header-anchor" href="#为什么要明显区分" aria-hidden="true">#</a> 为什么要明显区分？</h3><p>​ 比如说我们现在要开发一个自研依赖包，使用这个自研依赖包的时候我们还需要引用到别的依赖，引用的依赖分为两个情况，一个是<strong>运行自研依赖包所必备的依赖</strong>,在<code>dependencies</code>中写入，另一个是<strong>开发的时候使用的依赖</strong>，在<code>devDependencies</code>中写入。假设我们开发的自研依赖包是基于vue 的3.1.2的版本开发的，我们就把这个vue 3.1.2放在<code>devDependencies</code>里，当我们在开发这个自研依赖包的时候就可以使用vue 3.1.2来进行依赖包的开发，这样当我们在业务项目不是使用vue 3.1.2的情况下，也能成功引入自研依赖包来使用；如果自研依赖包把vue 3.2.1的引入放在<code>dependencies</code>里了，那么可能会出错，因为业务项目可能使用的是别的版本的vue ，这样就导致下载依赖的时候下了两个版本的Vue，可能会引起冲突。</p><p>​</p>',15),i=[s];function a(p,r){return d(),n("div",null,i)}const t=e(o,[["render",a],["__file","devDependencies he dependencies.html.vue"]]);export{t as default};
