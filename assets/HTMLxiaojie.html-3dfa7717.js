import{_ as p,o as t,c as r,b as o}from"./app-02cc30b2.js";const e={},s=o('<h2 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> HTML</h2><p><strong>问：src和href的区别？</strong></p><p>答：src在引用资源时会替换当前元素，href会在当前元素和引用资源之间建立链接。</p><p>src主要应用于img、script、iframe等元素，href应用于link和a等元素。</p><p><strong>问：link和script、@import的区别？</strong></p><p>答：解析到link标签的时候会下载并不会停止对当前文档的处理，解析到script标签的时候会暂停其他资源的下载和处理，直到当前资源加载执行完毕后才会继续开始其他资源的下载。@import需要页面完全载入后才会加载。</p><blockquote><p>link和@import都是外部引用CSS的方式，script适用于引入 JavaScript 文件或内嵌 JavaScript 代码。</p></blockquote><blockquote><p><code>&lt;link&gt;</code> 标签和 <code>&lt;script&gt;</code> 标签是 HTML 标签，而 @import 是 CSS 规则。</p></blockquote><p><strong>问：DOCTYPE（文档类型）的作用</strong></p><p>答：DOCTYPE是HTML5中的一种标准通用标记语言的文档类型声明。<strong>能够告诉浏览器要以什么文档类型来解析文档。</strong></p><p><strong>问：script标签中defer和async的区别</strong></p><p>答：defer属性的脚本会等文档完全解析和显示后才执行，会按照defer属性的脚本在文档中出现的顺序依次执行。async属性的脚本的加载和执行会一起进行，下载后就会立即执行，不会按照顺序执行。</p><blockquote><p>两者脚本的加载方式都是异步的，不会阻塞页面的渲染。</p><p>使用场景：如果脚本之间没有依赖关系，且不需要等待整个文档解析完成，可以使用 <code>async</code> 属性来并行加载和执行脚本。如果脚本之间有依赖关系，或需要在文档解析完成后执行，可以使用 <code>defer</code> 属性来按顺序加载和延迟执行脚本。</p></blockquote><p><strong>问：HTML语义化的理解</strong></p><p>答：HTML 语义化是指<strong>合理地使用 HTML 标签和属性</strong>，以便更好地描述页面的结构和内容，并为搜索引擎、辅助技术和开发者提供更好的理解和访问页面的能力。</p><p><strong>问：HTML语义化有什么优点</strong></p><ul><li><p>结构清晰，更易于代码阅读和维护。</p></li><li><p>SEO优化，搜索引擎能更好地理解和语义化的HTML结构。</p></li><li><p>设备兼容性更好，可以提高用户体验。</p></li><li><p>提升开发效率，有益于开发者理解页面接口和内容，可读性和可维护性更高。</p></li></ul><p><strong>问：HTML5的新更新</strong></p><p>答：语义化标签；多媒体支持；表单增强；本地存储（localStorage 和 sessionStorage ）；Web存储（IndexedDB 和 Web Storage）；Canvas 和 SVG</p><p><strong>问：讲讲meta标签</strong></p><p>答：meta标签用来定义页面元数据，描述网页文档属性，可以指定页面的字符编码、视口设置、搜索引擎优化。比如 meta的charset为&quot;UTF-8&quot; 表示页面使用 UTF-8 编码。</p><p>charset(文档编码）、keywords（关键词）、description（页面描述）、refresh（页面重定向和刷新）、viewport（适配移动端，控制视口大小和比例）</p><p><strong>问：label的使用</strong></p><p>答：让label的for属性值与表单控件的id属性值相同；label包裹表单控件标签</p><ul><li>关联表单控件</li><li>扩大可点击区域</li><li>增强可访问性（屏幕阅读器可以提供更准确的表单字段描述）</li></ul><p><strong>问：img、input是什么元素</strong></p><p>答：img、input属于可替换元素，可以设置高宽和内外边距。例如input，当指定为text类型，他将会有块元素的特性，当指定为button类型，他会有行内块元素的特性。</p><p><strong>问：说说iframe</strong></p><p>答：iframe标签可以在HTML文档里嵌入另一个HTML页面或外部资源。</p><p>优点：加载速度慢的内容（加载广告）</p><p>​ 脚本可以并行下载</p><p>​ 实现跨子域通信</p><p>缺点：iframe会阻塞主页面的onload事件</p><p>​ SEO不友好</p><p>​ 产生的页面多不易于管理</p><p><strong>问：什么是服务端渲染（SSR），有哪些好处？</strong></p><p>答：组件和页面在服务端渲染成HTML字符串，再返回相应给客户端。</p><p>优势：有利于SEO；首屏加载更快；社交媒体分享优化</p><p>缺点：服务端压力大；部署和维护成本增加；开发复杂性增加</p><p><strong>问：说说web worker</strong></p><p>答：web worker是javeScript的API，运行在后台进程里，不会影响主线程的运行，能够在后台进行复杂计算、数据处理、网络请求等任务，从而提高页面的性能。</p><p><strong>p.s.</strong> Web Worker 中无法直接访问 DOM 元素，因为它是在独立的线程中运行的，与主线程的 DOM 上下文是隔离的。</p><p>​ Web Worker 是在浏览器中运行的特性，它仅在支持的浏览器中可用。</p>',43),n=[s];function i(c,l){return t(),r("div",null,n)}const g=p(e,[["render",i],["__file","HTMLxiaojie.html.vue"]]);export{g as default};
