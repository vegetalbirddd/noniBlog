import{_ as s,o as n,c as a,b as e}from"./app-edcf87b8.js";const t="/noniBlog/assets/browserSecurity-4b63e0d3.png",o={},p=e('<h2 id="思维导图" tabindex="-1"><a class="header-anchor" href="#思维导图" aria-hidden="true">#</a> 思维导图</h2><p><img src="'+t+`" alt="图片"></p><h2 id="xss-跨站脚本攻击-cross-site-scripting" tabindex="-1"><a class="header-anchor" href="#xss-跨站脚本攻击-cross-site-scripting" aria-hidden="true">#</a> XSS 跨站脚本攻击（Cross Site Scripting）</h2><p>在网站中植入恶意代码并执行来实现对网站的攻击。</p><h3 id="存储型xss攻击" tabindex="-1"><a class="header-anchor" href="#存储型xss攻击" aria-hidden="true">#</a> 存储型XSS攻击</h3><p>利用漏洞提交恶意 JavaScript 代码，比如在input, textarea等所有可能输入文本信息的区域，输入<code>&lt;script src=&quot;http://恶意网站&quot;&gt;&lt;/script&gt;</code>等，提交后信息会存在服务器中，当用户再次打开网站请求到相应的数据，打开页面，恶意脚本执行，将用户的 Cookie 信息等数据上传到黑客服务器。</p><p>提交的包含了恶意代码的内容被存储在服务器上了，即XSS代码被持久化。</p><h3 id="反射型xss攻击" tabindex="-1"><a class="header-anchor" href="#反射型xss攻击" aria-hidden="true">#</a> 反射型XSS攻击</h3><p>用户将一段含有恶意代码的请求提交给 Web 服务器，Web 服务器接收到请求时，又将恶意代码反射给了浏览器端，这就是反射型 XSS 攻击。 比如搜索时发起的请求包含了恶意代码；或者黑客通过 QQ 群或者邮件等渠道诱导用户去点击这些恶意链接，点击链接时服务器发起请求，恶意代码被反射回来执行。</p><p>非持久化，代码被隐藏在链接里，欺骗用户自己去点击链接的时候触发XSS代码。反射型攻击不在服务器存储恶意脚本，这与存储型攻击不同。</p><h3 id="基于dom的xss攻击" tabindex="-1"><a class="header-anchor" href="#基于dom的xss攻击" aria-hidden="true">#</a> 基于DOM的XSS攻击</h3><p>基于 DOM 的 XSS 攻击是<strong>不牵涉到页面 Web 服务器</strong>的，这与前面两种攻击不同，它绕过WAF、躲避服务端的检测来对网站进行攻击。</p><p>它通过构造恶意URL或者修改页面中DOM元素，把恶意脚本注入到网站的DOM中，和反射型攻击有点像，不过它不会涉及服务器。</p><p>比如利用工具(如Burpsuite)扫描目标网站所有的网页并自动测试写好的注入脚本等。</p><h3 id="防范" tabindex="-1"><a class="header-anchor" href="#防范" aria-hidden="true">#</a> 防范</h3><ul><li><p>对提交内容的<strong>非法标签和属性</strong>进行校验并<strong>过滤</strong>，例如<code>&lt;script&gt;</code>、onclick等，可以用正则表达式来过滤</p></li><li><p>转义单引号，双引号，尖括号等特殊字符，可以采用htmlencode编码 或者过滤掉这些特殊字符</p></li><li><p>将cookie等敏感信息设置为httponly，禁止Javascript通过<code>document.cookie</code>获得</p></li><li><p><strong>CSP</strong>（Content Security Policy）内容安全策略。主要以<strong>白名单</strong>的形式配置可信任的内容来源，在网页中，能够使白名单中的内容正常执行（包含 JS，CSS，Image 等等），而非白名单的内容无法正常执行，从而减少跨站脚本攻击（XSS），当然，也能够减少运营商劫持的内容注入攻击。 配置方式：</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1、meta</span>
 
<span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">&quot;Content-Security-Policy&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;script-src &#39;self&#39;&quot;</span><span class="token operator">&gt;</span>
 
<span class="token comment">//2、Http 头部</span>
 
Content<span class="token operator">-</span>Security<span class="token operator">-</span>Policy<span class="token operator">:</span>
script<span class="token operator">-</span>src <span class="token string">&#39;unsafe-inline&#39;</span> <span class="token string">&#39;unsafe-eval&#39;</span> <span class="token string">&#39;self&#39;</span> <span class="token operator">*</span><span class="token punctuation">.</span>54php<span class="token punctuation">.</span>cn <span class="token operator">*</span><span class="token punctuation">.</span>yunetidc<span class="token punctuation">.</span>com <span class="token operator">*</span><span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com <span class="token operator">*</span><span class="token punctuation">.</span>cnzz<span class="token punctuation">.</span>com <span class="token operator">*</span><span class="token punctuation">.</span>du
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),i=[p];function c(r,l){return n(),a("div",null,i)}const u=s(o,[["render",c],["__file","liulanqianquan.html.vue"]]);export{u as default};
