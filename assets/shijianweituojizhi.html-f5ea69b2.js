import{_ as a,o as e,c as r,b as n}from"./app-79f6c2df.js";const t={},h=n('<h1 id="事件委托机制eventdelegation" tabindex="-1"><a class="header-anchor" href="#事件委托机制eventdelegation" aria-hidden="true">#</a> <strong>事件委托机制EventDelegation</strong></h1><h3 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> <strong>是什么</strong></h3><p>事件委托机制就是把事件处理程序委托给父元素或祖先元素来处理，而不是直接把事件处理程序绑定给子元素。</p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> <strong>例子</strong></h3><p>比如说，现在我有一个ul元素，这个元素有许多li子元素，需要给li元素绑定事件，就可以在父元素ul上来绑定事件，通过e.target来判断那个li元素需要执行事件。</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> <strong>优点</strong></h3><p>使用事件委托可以减少事件处理的数量，只需要在一个元素上绑定事件就能够处理所有子元素的事件，<strong>能够减少内存占用和页面加载时间，减少代码量，并且可以让代码更具有维护性</strong>。</p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> <strong>原理</strong></h3><p>事件委托机制的实现是基于事件冒泡的。当一个事件被触发时，它会沿着DOM树向上传播，直到它到达文档的根节点。在这个过程中，每个祖先元素都会检查它是否有绑定该事件，如果有，该处理程序就会被执行。</p><h3 id="拓展-dom事件流" tabindex="-1"><a class="header-anchor" href="#拓展-dom事件流" aria-hidden="true">#</a> <strong>拓展：DOM事件流</strong></h3><h4 id="捕获阶段" tabindex="-1"><a class="header-anchor" href="#捕获阶段" aria-hidden="true">#</a> <strong>捕获阶段</strong></h4><p>事件从文档的根节点开始向下传播，直到达到事件目标元素的祖先元素。在这个过程中，如果有任何祖先元素有绑定该事件的处理程序，这个处理程序就会被执行。</p><h4 id="目标阶段" tabindex="-1"><a class="header-anchor" href="#目标阶段" aria-hidden="true">#</a> <strong>目标阶段</strong></h4><p>在目标阶段，事件到达目标元素。如果该元素有绑定该事件的处理程序，这个处理程序就会被执行。</p><h4 id="冒泡阶段" tabindex="-1"><a class="header-anchor" href="#冒泡阶段" aria-hidden="true">#</a> <strong>冒泡阶段</strong></h4><p>在冒泡阶段，事件从目标元素开始向上冒泡直到文档根节点。在这个过程中如果该元素有绑定该事件的处理程序，这个处理程序就会被执行。</p><h4 id="顺序" tabindex="-1"><a class="header-anchor" href="#顺序" aria-hidden="true">#</a> <strong>顺序</strong></h4><p>从上到下（捕获阶段），然后从下到上（冒泡阶段）。在事件冒泡阶段中，事件处理程序通常绑定到目标元素或其祖先元素上，以便在事件传播到目标元素时被调用。</p>',18),i=[h];function d(s,o){return e(),r("div",null,i)}const l=a(t,[["render",d],["__file","shijianweituojizhi.html.vue"]]);export{l as default};
