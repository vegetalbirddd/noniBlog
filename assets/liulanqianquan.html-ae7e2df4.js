import{_ as o,r,o as i,c as p,d as s,e,a as n,b as t}from"./app-b31259c3.js";const l="/noniBlog/assets/browserSecurity-4b63e0d3.png",c={},d=t('<h2 id="思维导图" tabindex="-1"><a class="header-anchor" href="#思维导图" aria-hidden="true">#</a> 思维导图</h2><p><img src="'+l+`" alt="图片"></p><h2 id="xss-跨站脚本攻击-cross-site-scripting" tabindex="-1"><a class="header-anchor" href="#xss-跨站脚本攻击-cross-site-scripting" aria-hidden="true">#</a> XSS 跨站脚本攻击（Cross Site Scripting）</h2><p>在网站中植入恶意代码并执行来实现对网站的攻击。</p><h3 id="存储型xss攻击" tabindex="-1"><a class="header-anchor" href="#存储型xss攻击" aria-hidden="true">#</a> 存储型XSS攻击</h3><p>利用漏洞提交恶意 JavaScript 代码，比如在input, textarea等所有可能输入文本信息的区域，输入<code>&lt;script src=&quot;http://恶意网站&quot;&gt;&lt;/script&gt;</code>等，提交后信息会存在服务器中，当用户再次打开网站请求到相应的数据，打开页面，恶意脚本执行，将用户的 Cookie 信息等数据上传到黑客服务器。</p><p>提交的包含了恶意代码的内容被存储在服务器上了，即XSS代码被持久化。</p><h3 id="反射型xss攻击" tabindex="-1"><a class="header-anchor" href="#反射型xss攻击" aria-hidden="true">#</a> 反射型XSS攻击</h3><p>用户将一段含有恶意代码的请求提交给 Web 服务器，Web 服务器接收到请求时，又将恶意代码反射给了浏览器端，这就是反射型 XSS 攻击。 比如搜索时发起的请求包含了恶意代码；或者黑客通过 QQ 群或者邮件等渠道诱导用户去点击这些恶意链接，点击链接时服务器发起请求，恶意代码被反射回来执行。</p><p>非持久化，代码被隐藏在链接里，欺骗用户自己去点击链接的时候触发XSS代码。反射型攻击不在服务器存储恶意脚本，这与存储型攻击不同。</p><h3 id="基于dom的xss攻击" tabindex="-1"><a class="header-anchor" href="#基于dom的xss攻击" aria-hidden="true">#</a> 基于DOM的XSS攻击</h3><p>基于 DOM 的 XSS 攻击是<strong>不牵涉到页面 Web 服务器</strong>的，这与前面两种攻击不同，它绕过WAF、躲避服务端的检测来对网站进行攻击。</p><p>它通过构造恶意URL或者修改页面中DOM元素，把恶意脚本注入到网站的DOM中，和反射型攻击有点像，不过它不会涉及服务器。</p><p>比如利用工具(如Burpsuite)扫描目标网站所有的网页并自动测试写好的注入脚本等。</p><h3 id="防范" tabindex="-1"><a class="header-anchor" href="#防范" aria-hidden="true">#</a> 防范</h3><ul><li><p>对提交内容的<strong>非法标签和属性</strong>进行校验并<strong>过滤</strong>，例如<code>&lt;script&gt;</code>、onclick等，可以用正则表达式来过滤</p></li><li><p>转义单引号，双引号，尖括号等特殊字符，可以采用htmlencode编码 或者过滤掉这些特殊字符</p></li><li><p>将cookie等敏感信息设置为httponly，禁止Javascript通过<code>document.cookie</code>获得</p></li><li><p><strong>CSP</strong>（Content Security Policy）内容安全策略。主要以<strong>白名单</strong>的形式配置可信任的内容来源，在网页中，能够使白名单中的内容正常执行（包含 JS，CSS，Image 等等），而非白名单的内容无法正常执行，从而减少跨站脚本攻击（XSS），当然，也能够减少运营商劫持的内容注入攻击。 配置方式：</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1、meta</span>
 
<span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">&quot;Content-Security-Policy&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;script-src &#39;self&#39;&quot;</span><span class="token operator">&gt;</span>
 
<span class="token comment">//2、Http 头部</span>
 
Content<span class="token operator">-</span>Security<span class="token operator">-</span>Policy<span class="token operator">:</span>
script<span class="token operator">-</span>src <span class="token string">&#39;unsafe-inline&#39;</span> <span class="token string">&#39;unsafe-eval&#39;</span> <span class="token string">&#39;self&#39;</span> <span class="token operator">*</span><span class="token punctuation">.</span>54php<span class="token punctuation">.</span>cn <span class="token operator">*</span><span class="token punctuation">.</span>yunetidc<span class="token punctuation">.</span>com <span class="token operator">*</span><span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com <span class="token operator">*</span><span class="token punctuation">.</span>cnzz<span class="token punctuation">.</span>com <span class="token operator">*</span><span class="token punctuation">.</span>du
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="csrf跨站请求伪造-cross-site-request-forgery" tabindex="-1"><a class="header-anchor" href="#csrf跨站请求伪造-cross-site-request-forgery" aria-hidden="true">#</a> CSRF跨站请求伪造（Cross-site request forgery）</h2><p>利用网站的请求，让用户在访问网站的时候，进行的操作被执行到其他网站上。可以以用户的名义（拿到用户的权限）去发起一些合法请求来完成某些操作。</p><h3 id="发起csrf的三个必要条件" tabindex="-1"><a class="header-anchor" href="#发起csrf的三个必要条件" aria-hidden="true">#</a> 发起CSRF的三个必要条件</h3><ul><li>目标站点存在CSRF漏洞</li><li>用户登录过目标站点，且在浏览器上保持有该站点的登录状态</li><li>需要用户打开一个第三方站点（如黑客的站点）</li></ul><h3 id="get型攻击" tabindex="-1"><a class="header-anchor" href="#get型攻击" aria-hidden="true">#</a> get型攻击</h3><p>通过模拟get请求，向目标网站发起攻击。</p><h3 id="post型攻击" tabindex="-1"><a class="header-anchor" href="#post型攻击" aria-hidden="true">#</a> post型攻击</h3><p>通过模拟post请求，如发起表单提交，向目标网站发起攻击。</p><h3 id="csrf漏洞测试" tabindex="-1"><a class="header-anchor" href="#csrf漏洞测试" aria-hidden="true">#</a> CSRF漏洞测试</h3><p>检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，<strong>去掉Referer字段后再重新提交</strong>，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p><blockquote><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</p></blockquote><p><strong>CSRFTester</strong>，<strong>CSRF Request Builder</strong>等是专门针对CSRF漏洞进行检测的工具。</p><p>以CSRFTester工具为例，CSRF漏洞检测工具的测试原理如下：使用CSRFTester进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在CSRFTester中修改相应的表单等信息，重新提交，这相当于一次<strong>伪造客户端请求</strong>。如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。</p><h3 id="防范-1" tabindex="-1"><a class="header-anchor" href="#防范-1" aria-hidden="true">#</a> 防范</h3><p><strong>CSRF 通常从第三方网站发起，被攻击的网站无法防止攻击发生</strong>，只能通过增强自己网站针对 CSRF 的防护能力来提升安全性。</p><p>上文中讲了 CSRF 的两个特点：</p><ol><li>CSRF（通常）<strong>发生在第三方域名</strong>。</li><li>CSRF 攻击者不能获取到 Cookie 等信息，<strong>只是使用</strong>。</li></ol><p>针对以上特点，CSRF 可制定以下两种防御策略：</p><ul><li><p><strong>自动防御：阻止不明外域的访问</strong></p></li><li><ul><li>同源检测</li><li>Samesite Cookie</li></ul></li><li><p><strong>主动防御：提交时要求附加本域才能获取的信息</strong></p></li><li><ul><li>Synchrogazer Tokens</li><li>Double Cookie Defense</li><li>Custom Header</li></ul></li></ul><p>自动防御即利用 HTTP 协议固有的特性进行自动防护，而主动防御则需要通过编程手段进行防御。</p><h4 id="自动防御" tabindex="-1"><a class="header-anchor" href="#自动防御" aria-hidden="true">#</a> 自动防御</h4><h5 id="同源验证" tabindex="-1"><a class="header-anchor" href="#同源验证" aria-hidden="true">#</a> 同源验证</h5><p>因为CSRF的攻击很多是第三方网站发起的请求，所以可以直接禁止外域/不信任的域对自己的网站发起请求</p><p>在 HTTP 协议中，每一个异步请求都会携带两个Header，用于标记来源域名：</p><ul><li>Origin Header</li><li>Referer Header</li></ul><p>通过验证这两个Header是否受信任实现同源检测。</p><p>优点：使用方便，开发简单，一定程度上能预防CSRF攻击；</p><p>缺点：这种机制完全依托于浏览器，Referer字段容易被故意篡改，或者被禁用。</p><h5 id="samesite-cookie" tabindex="-1"><a class="header-anchor" href="#samesite-cookie" aria-hidden="true">#</a> <strong>Samesite Cookie</strong></h5><p><strong>为 Set-Cookie 响应头新增 Samesite 属性</strong>，它用来标明这个 cookie 是个“同站 cookie”，同站 cookie 只能作为第一方 cookie，不能作为第三方 cookie。</p><p>SameSite 有两个属性值，分别是 Strict 和 Lax。</p><ul><li>Samesite=Strict：严格模式，表明这个 cookie 在任何情况下都不可能作为第三方 cookie，绝无例外。</li><li>Samesite=Lax：宽松模式，比 Strict 放宽了点限制。假如这个请求是同步请求（改变了当前页面或者打开了新页面）且同时是个 GET 请求，则这个 cookie 可以作为第三方 cookie。</li></ul><p>但 Samesite Cookie 也存在着一些问题：</p>`,50),h=s("li",null,"Samesite 的兼容性不是很好，现阶段除了从新版 Chrome 和 Firefox 支持以外，Safari 以及 iOS Safari 都还不支持，现阶段看来暂时还不能普及。",-1),u=s("strong",null,"不支持子域",-1),g={href:"https://link.zhihu.com/?target=http%3A//blog.ursb.me",target:"_blank",rel:"noopener noreferrer"},S={href:"https://link.zhihu.com/?target=http%3A//ursb.me",target:"_blank",rel:"noopener noreferrer"},k=t('<h4 id="主动防御" tabindex="-1"><a class="header-anchor" href="#主动防御" aria-hidden="true">#</a> <strong>主动防御</strong></h4><p>CSRF 主动防御措施有以下三种：</p><ol><li><strong>Synchronizer Tokens</strong>：<strong>同步器令牌模式</strong>，在HTTP请求中带上CSRF令牌随机生成的值，服务器会找到预期的CSRF令牌和请求这个值做对比，若不匹配则拒绝请求。</li><li><strong>Double Cookie Defense</strong>：<strong>双重验证Cookie</strong>，将 token 设置在 Cookie 中，在提交 POST 请求的时候提交 Cookie，并通过 header 或者 body 带上 Cookie 中的 token，服务端进行对比校验。</li><li><strong>Custom Header</strong>：信任带有特定的 header（例如 <code>X-Requested-With: XMLHttpRequest</code>）的请求。这个方案可以被绕过，所以 rails 和 django 等框架都放弃了该防范方式。</li></ol>',3);function m(C,f){const a=r("ExternalLinkIcon");return i(),p("div",null,[d,s("ol",null,[h,s("li",null,[e("而且，SamesiteCookie 目前有一个致命的缺陷，"),u,e("。例如，种在 "),s("a",g,[e("http://blog.ursb.me"),n(a)]),e(" 下的 Cookie，并不能使用 "),s("a",S,[e("http://ursb.me"),n(a)]),e(" 下种植的 SamesiteCookie。这就导致了当我们网站有多个子域名时，不能使用SamesiteCookie 在主域名存储用户登录信息。每个子域名都需要用户重新登录一次。这是不实际的。")])]),k])}const x=o(c,[["render",m],["__file","liulanqianquan.html.vue"]]);export{x as default};
