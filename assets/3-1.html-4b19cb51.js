import{_ as n,o as a,c as s,b as e}from"./app-e9465bcc.js";const t={},p=e(`<h2 id="语言基础" tabindex="-1"><a class="header-anchor" href="#语言基础" aria-hidden="true">#</a> 语言基础</h2><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><h4 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h4><p>1、一切都区分大小写</p><p>2、标识符第一个字符必须为一个字母、下划线（_）或美元符号（$）；其他字符可以是字母、下划线、美元符号或数字。关键字、保留字、true、false和null不能作为标识符。</p><p>3、单行注释和块注释</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 单行注释</span>
<span class="token comment">/* 块注释
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、严格模式：ECMAScript 3的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。</p><p>启用：在脚本开头加上&quot;use strict&quot;，也可以放到函数体开头，单独指定一个函数在严格模式下执行</p><p>5、语句末尾分号不必须</p><h4 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h4><p>ECMAScript 变量是松散类型的，意思是变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有3个关键字可以声明变量：var、const、let。</p><h5 id="var关键字" tabindex="-1"><a class="header-anchor" href="#var关键字" aria-hidden="true">#</a> var关键字</h5><p>**声明作用域：**使用 var 操作符定义的变量会成为包含它的函数的局部变量。在函数内定义变量时省略var操作符，可以创建一个全局变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
	message <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span>     <span class="token comment">// 全局变量 </span>
<span class="token punctuation">}</span> 
<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;hi&quot; </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出ReferenceError。</p></blockquote><p>**声明提升：**调用某变量的语句在声明该变量之前不会报错。关键字声明的变量会自动提升到函数作用域顶部。所谓的“提升”（hoist），就是把所有变量声明都拉到函数作用域的顶部。可以反复多次使用var声明同一个变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// undefined </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
<span class="token keyword">var</span> age<span class="token punctuation">;</span> 
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// undefined </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),c=[p];function o(i,l){return a(),s("div",null,c)}const d=n(t,[["render",o],["__file","3-1.html.vue"]]);export{d as default};
