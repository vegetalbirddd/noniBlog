import{_ as n,o as s,c as a,b as e}from"./app-06080b5b.js";const p={},t=e(`<h1 id="同源策略" tabindex="-1"><a class="header-anchor" href="#同源策略" aria-hidden="true">#</a> 同源策略</h1><h2 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么</h2><p>URL的 <strong>协议(scheme)，域名(host)，端口(port)</strong> 都相同则同源。这三者称为源。</p><h2 id="为什么需要同源策略" tabindex="-1"><a class="header-anchor" href="#为什么需要同源策略" aria-hidden="true">#</a> 为什么需要同源策略</h2><p>同源策略可以限制无法读取非同源的cookie、Storage、indexDB、DOM；并会拦截非同源的请求。因此，同源策略可以防止恶意网站获取其他网站的本地数据（比如iframe、通过cookie免登拿数据）</p><h2 id="常见跨域方法" tabindex="-1"><a class="header-anchor" href="#常见跨域方法" aria-hidden="true">#</a> 常见跨域方法</h2><h3 id="cors" tabindex="-1"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> CORS</h3><p>CORS（跨域资源共享Cross-Origin Resource Sharing）使用专用的HTTP头，服务器告知浏览器，特定URL的ajax请求可以直接使用，不会触发同源策略。（允许请求的跨域）</p><p>浏览器是否启用同源安全策略是根据后端响应的 Access-Control-Allow-Origin 响应头来定的，所以配置后端是最直接的一种方法，也是工作中常用的解决方案。</p><p>支持：支持所有的主流浏览器、IE9+。</p><p>操作：在服务器端进行配置，加一个 Access-Control-Allow-Origin 响应头</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果这个字段的值是&quot;*&quot;，那么会允许所有请求，如果是一个域名，那么浏览器就不会对这个域名下的请求的响应进行拦截。</p><p>根据开发接口的语言和库的不同，配置 Access-Control-Allow-Origin响应头的方法也不同，如果使用的是 node.js 和 express，那么可以添加CORS中间件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cors&#39;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CORS默认会允许所有跨域请求，如果要限制指定域名，可以给它的<strong>origin配置项</strong>传递一个字符串或数组，用于指定一个或多个允许跨域的域名：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;http://domain1.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://domain2.com&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h3><p>带scr属性的标签（ <code>&lt;\\script&gt;</code>、<code>&lt;\\img&gt;</code>、<code>&lt;\\iframe&gt;</code>）不会经过同源策略，所以可以通过调用js脚本的方式从服务器上获取JSON数据绕过同源策略。</p><p>只有xhr的请求方式才有可能产生跨域问题，所以不会产生跨域问题。</p><p>实现流程：</p><ul><li>声明一个回调函数，其函数名当作参数值传递给跨域请求数据的服务器，函数形参为要获取的目标数据，即服务器返回的data</li><li>创建一个script标签，把跨域的api数据接口赋值给src属性，通过问号传参的方式加上函数名。比如 ?callback=getDatas</li><li>服务器接收到请求后，把传递进来的函数名和它需要的数据拼接成一个函数调用形式的字符串，比如 &quot;getDatas(&#39;目标数据&#39;)&quot;</li><li>最后服务器通过HTTP协议返回给客户端，解析执行函数。</li></ul><p>理解：全局定义一个函数 getDatas，并通过script标签的src属性把函数名发到后端，后端收到函数名后，把数据填充进括号里，返回给前端，比如字符串 &quot;getDatas(&#39;目标数据&#39;)&quot;，前端得到字符串后，因为是script标签，当作js文件进行解析，发现是个函数调用，执行函数后数据就得到了。</p><p>要求：JSONP需要服务器进行支持。</p><p>缺点：只支持 GET。</p><p>应用场景：有些第三方数据接口可能会使用jsonp解决跨域问题，<strong>工作中基本不用</strong>。</p><h3 id="nginx反向代理" tabindex="-1"><a class="header-anchor" href="#nginx反向代理" aria-hidden="true">#</a> nginx反向代理</h3><p>当要访问A的url，通过nginx服务器代理到Burl，浏览器不知道用户实际访问的是B，就不会触发同源策略。</p><h2 id="配置前端" tabindex="-1"><a class="header-anchor" href="#配置前端" aria-hidden="true">#</a> 配置前端</h2><p>在前端开发环境中，配置代理，中转请求。因为跨域是浏览器的安全策略，如果脱离浏览器发送请求是不会受到同源安全策略的影响的，所以可以使用一个中间服务器对浏览器进行代理。</p><p>一般的前端脚手架工具都支持配置代理，例如 vue cli、vite、create react app等。</p><h3 id="_1-vue-cli-配置正向代理" tabindex="-1"><a class="header-anchor" href="#_1-vue-cli-配置正向代理" aria-hidden="true">#</a> 1. vue cli 配置正向代理</h3><p>vue cli 提供的 webpack-dev-server 开发服务器支持设置代理，可以在 <strong>vue.config.js</strong> 文件中配置<strong>devServer配置项</strong>下的<strong>proxy配置项</strong>，把对/api路径的请求代理转发到真实的后端服务器路径，再根据需要对转发后的URL进行改写。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置代理</span>
        <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;/api&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 类似于前缀</span>
                <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://127.0.0.1:8888/api/xxx&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 目标服务器地址</span>
                <span class="token literal-property property">wx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否启用 websocket</span>
                <span class="token literal-property property">chageOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启代理：在本地会创建一个虚拟服务器，然后发送请求的数据，</span>
                <span class="token comment">// 同时接收响应的数据，这样服务端和服务端之间进行数据交互就不会有跨域的问题</span>
                <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token string-property property">&quot;^/api&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-vite-配置正向代理" tabindex="-1"><a class="header-anchor" href="#_2-vite-配置正向代理" aria-hidden="true">#</a> 2. vite 配置正向代理</h4><p>vite 提供的开发服务器支持设置代理，可以在 <strong>vite.config.js</strong> 文件中配置<strong>server配置项</strong>下的<strong>proxy配置项</strong>，把对/api路径的请求代理转发到真实的后端服务器路径，再根据需要对转发后的URL进行改写。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置代理</span>
        <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;/api&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 配置需要代理的路径，作用类似于前缀</span>
                <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://127.0.0.1:8888/api/xxx&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 目标服务器地址</span>
                <span class="token literal-property property">wx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否启用 websocket</span>
                <span class="token literal-property property">chageOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许跨域</span>
                <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 重写代理路径</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-create-react-app-配置正向代理" tabindex="-1"><a class="header-anchor" href="#_3-create-react-app-配置正向代理" aria-hidden="true">#</a> 3. create react app 配置正向代理</h4><p><strong>注意</strong>：</p><p>配置Proxy理后，注释掉 axios.defaults.baseURL</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><p>https://juejin.cn/post/7206327507532070969</p>`,42),o=[t];function c(r,i){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","tongyuancelue.html.vue"]]);export{u as default};
