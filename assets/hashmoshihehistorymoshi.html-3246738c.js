import{_ as a,o as n,c as s,b as t}from"./app-3073e2da.js";const e={},p=t(`<h1 id="hash模式和history模式" tabindex="-1"><a class="header-anchor" href="#hash模式和history模式" aria-hidden="true">#</a> hash模式和history模式</h1><p>Vue中的router有两种模式：hash模式（默认）、history模式（需配置mode: &#39;history&#39;）</p><h2 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> hash</h2><p>hash的url带#，不会被包括在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。</p><p>路由的哈希模式其实是利用了<code>window.onhashchange</code>事件，也就是说，url中的哈希值（#后面的值）如果有变化，就会自动调用hashchange的监听事件，在hashchange的监听事件内可以得到改变后的url，这样能够找到对应页面进行加载</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token comment">// 把改变后的url地址栏的url赋值给data的响应式数据current，调用router-view去加载对应的页面</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h2><p>HTML5 History Interface 中新增的两个API:<code> pushState()</code> 和 <code>replaceState()</code> 方法（需要特定浏览器支持），用来完成 URL 跳转而无须重新加载页面，不过这种模式还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，就需要前端自己配置404页面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;history&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>NotFoundComponent <span class="token punctuation">}</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>pushState() </code>和<code>replaceState()</code>可以<strong>将url替换并且不刷新页面</strong>，http并没有去请求服务器该路径下的资源，一旦刷新就会暴露这个实际不存在的资源，显示404（因为浏览器一旦刷新，就是去真正请求服务器资源）</p><p>那么如何去解决history模式下刷新报404的弊端呢，这就需要服务器端做点手脚，将不存在的路径请求重定向到入口文件（index.html），前后端联手，齐心协力做好“挂羊头卖狗肉”的完美特效</p><p><strong>pushState方法、方法，只能导致history对象发生变化，从而改变当前地址栏的 URL，但浏览器不会向后端发送请求，也不会触发popstate事件的执行</strong></p><p><strong>popstate事件的执行是在点击浏览器的前进后退按钮的时候，才会被触发</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="补充知识" tabindex="-1"><a class="header-anchor" href="#补充知识" aria-hidden="true">#</a> 补充知识</h3><h4 id="pushstate-方法" tabindex="-1"><a class="header-anchor" href="#pushstate-方法" aria-hidden="true">#</a> pushState() 方法</h4><p><code>pushState()</code> 方法用于向浏览器的会话历史栈中添加一个新的状态。它的语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>stateObject<span class="token punctuation">,</span> title<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>stateObject</code>: 一个包含状态信息的 JavaScript 对象，可以是任意类型的数据。这个对象会和新的历史记录条目一起存储。</li><li><code>title</code>: 当前页面的标题。现在大多数浏览器忽略这个参数。</li><li><code>url</code>: 新历史记录条目的 URL。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>codevar state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 添加新的历史记录条目</span>
history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&quot;Page 1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/page1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="popstate-事件" tabindex="-1"><a class="header-anchor" href="#popstate-事件" aria-hidden="true">#</a> popstate 事件</h4><p>当用户点击浏览器的前进或后退按钮时，或者通过 JavaScript 调用 <code>history.back()</code>、<code>history.forward()</code>、<code>history.go()</code> 方法时，会触发 <code>popstate</code> 事件。可以通过监听该事件来捕获状态的变化。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>codewindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;State changed:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replacestate-方法" tabindex="-1"><a class="header-anchor" href="#replacestate-方法" aria-hidden="true">#</a> replaceState() 方法</h3><p><code>replaceState()</code> 方法是 HTML5 中 History API 的一部分，与 <code>pushState()</code> 方法类似，用于在浏览器的会话历史中添加一个新的状态。与 <code>pushState()</code> 不同，<code>replaceState()</code> 不会添加新的历史记录条目，而是用新的状态替换当前的历史记录条目。</p><p><code>replaceState()</code> 方法的语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>stateObject<span class="token punctuation">,</span> title<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>stateObject</code>: 一个包含状态信息的 JavaScript 对象，可以是任意类型的数据。这个对象会与当前历史记录条目一起存储。</li><li><code>title</code>: 当前页面的标题。大多数浏览器忽略这个参数。</li><li><code>url</code>: 新历史记录条目的 URL。</li></ul><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h4><ol><li><code>stateObject</code> 是一个可以包含任意数据的对象，但它必须是可序列化的，因为它会随着历史记录存储在用户代理中。</li><li><code>title</code> 参数在大多数浏览器中被忽略，因此可以传入一个空字符串。</li><li>虽然可以通过 <code>pushState()</code> 改变 URL，但它并不会触发页面的加载或发送 HTTP 请求。因此，通常需要结合 <code>popstate</code> 事件以及其他手段，比如监听 URL 变化，来执行相应的操作。</li></ol><p>总体而言，<code>pushState()</code> 和相关的 API 提供了一种在不刷新整个页面的情况下，通过 JavaScript 动态修改浏览器地址栏和历史记录的机制。这对于构建单页应用 (SPA) 或实现更流畅的用户体验非常有用</p><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> 区别</h2><table><thead><tr><th></th><th>hash</th><th>history</th></tr></thead><tbody><tr><td>url显示</td><td>带#</td><td>无#</td></tr><tr><td>回车刷新</td><td>可以加载到hash值对应的页面</td><td>可能会出现404（需要后端配置url重定向）</td></tr><tr><td>支持版本</td><td>支持低版本浏览器和IE浏览器</td><td>用了HTML5的API，可能不兼容低版本浏览器</td></tr></tbody></table>`,34),o=[p];function c(i,l){return n(),s("div",null,o)}const u=a(e,[["render",c],["__file","hashmoshihehistorymoshi.html.vue"]]);export{u as default};
