import{_ as n,o as s,c as a,b as t}from"./app-d147d0d6.js";const e={},p=t(`<h2 id="new操作符的实现原理" tabindex="-1"><a class="header-anchor" href="#new操作符的实现原理" aria-hidden="true">#</a> new操作符的实现原理</h2><h3 id="new操作符的定义" tabindex="-1"><a class="header-anchor" href="#new操作符的定义" aria-hidden="true">#</a> new操作符的定义</h3><h4 id="示例1-对象类型和对象实例" tabindex="-1"><a class="header-anchor" href="#示例1-对象类型和对象实例" aria-hidden="true">#</a> 示例1（对象类型和对象实例）</h4><p>new操作符可以用来创建一个用户定义的<strong>对象类型的实例</strong>或<strong>具有构造函数的内置对象的实例</strong>。（来自MDN的定义）</p><p>简而言之：<strong>new可以创建对象实例</strong></p><p>使用场景：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">newTest</span><span class="token punctuation">(</span><span class="token parameter">arguments1<span class="token punctuation">,</span>arguments2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">//构造一个函数newTest</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arguments1 <span class="token operator">=</span> arguments1<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arguments2 <span class="token operator">=</span> arguments2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">newTest</span><span class="token punctuation">(</span><span class="token string">&#39;demo1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;demo2&#39;</span><span class="token punctuation">)</span>	<span class="token comment">//创建一个给定了构造函数newTest的对象实例test</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>arguments1<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//&#39;demo1&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>arguments2<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//&#39;demo2&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例2-对象属性为其他对象" tabindex="-1"><a class="header-anchor" href="#示例2-对象属性为其他对象" aria-hidden="true">#</a> 示例2（对象属性为其他对象）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Rand McNally&quot;</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Ken Jones&quot;</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">,</span> owner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> make<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> car1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&quot;Eagle&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Talon TSi&quot;</span><span class="token punctuation">,</span> <span class="token number">1993</span><span class="token punctuation">,</span> rand<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//在owner中传入的为对象</span>
<span class="token keyword">var</span> car2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&quot;Nissan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;300ZX&quot;</span><span class="token punctuation">,</span> <span class="token number">1992</span><span class="token punctuation">,</span> ken<span class="token punctuation">)</span><span class="token punctuation">;</span>

car2<span class="token punctuation">.</span>owner<span class="token punctuation">.</span>name	<span class="token comment">//&#39;Ken Jones&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理阐述" tabindex="-1"><a class="header-anchor" href="#原理阐述" aria-hidden="true">#</a> 原理阐述</h3><h4 id="new关键字进行的基本操作" tabindex="-1"><a class="header-anchor" href="#new关键字进行的基本操作" aria-hidden="true">#</a> new关键字进行的基本操作</h4><p>1、生成一个空白的对象</p><p>2、新对象添加<code>__proto__</code>属性，把属性链接到原型</p><p>3、构造函数的<code>this</code>的上下文绑定到新对象上</p><p>4、构造函数返回的是对象，那么最终返回构造函数执行的结果；否则返回新对象</p><h4 id="手写new" tabindex="-1"><a class="header-anchor" href="#手写new" aria-hidden="true">#</a> 手写new</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>	 <span class="token comment">//1、生成空白的对象</span>
    obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> fn<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>	<span class="token comment">//2、新对象添加\`__proto__\`属性，把属性链接到原型</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//3、把构造函数fn的this绑定到新对象obj上</span>
    <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">;</span>	<span class="token comment">//4、如果构造函数返回的是对象，则使用构造函数执行的结果。否则，返回新对象</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">newTest</span><span class="token punctuation">(</span><span class="token parameter">arguments1<span class="token punctuation">,</span>arguments2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	
    <span class="token keyword">this</span><span class="token punctuation">.</span>arguments1 <span class="token operator">=</span> arguments1<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arguments2 <span class="token operator">=</span> arguments2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>newTest<span class="token punctuation">,</span><span class="token string">&#39;demo1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;demo2&#39;</span><span class="token punctuation">)</span>	<span class="token comment">//使用myNew来创建新对象实例</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>arguments1<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//&#39;demo1&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>arguments2<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//&#39;demo2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","newcaozuofudeshixianyuanli.html.vue"]]);export{r as default};
