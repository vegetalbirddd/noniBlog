import{_ as n,o as s,c as a,b as t}from"./app-c1d09215.js";const e={},p=t(`<h2 id="变量、作用域与内存" tabindex="-1"><a class="header-anchor" href="#变量、作用域与内存" aria-hidden="true">#</a> 变量、作用域与内存</h2><h3 id="_4-1-原始值与引用值" tabindex="-1"><a class="header-anchor" href="#_4-1-原始值与引用值" aria-hidden="true">#</a> 4.1 原始值与引用值</h3><table><thead><tr><th></th><th>原始值</th><th>引用值</th></tr></thead><tbody><tr><td>存储方式</td><td>栈内存</td><td>堆内存</td></tr><tr><td>访问方式</td><td>按值访问</td><td>按引用访问</td></tr><tr><td>复制值</td><td>值被复制到新变量的位置，新旧变量相互独立</td><td>复制后，新旧变量指向同一对象</td></tr><tr><td>确定类型</td><td>typeof(适用字符串、数值、布尔值、undefned;null会返回object)</td><td>instanceof</td></tr></tbody></table><p><strong>补充：</strong></p><p><strong>4.1.1 动态属性</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name1 <span class="token operator">=</span> <span class="token string">&quot;n1&quot;</span>
<span class="token keyword">let</span> name2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;n2&quot;</span><span class="token punctuation">)</span>
name1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">27</span>
name2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">26</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name2<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">//26</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name1<span class="token punctuation">)</span> <span class="token comment">//string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name2<span class="token punctuation">)</span> <span class="token comment">//object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>new关键字创建“原始类型”时，会创建类原始值的object实例</p><p><strong>4.1.3 传递参数</strong></p><p>传参只有<strong>按值传递</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;nicholas&quot;</span>
    obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Greg&quot;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">setName</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//nicholas</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数中参数的值改变了，原始的引用没有变化，因为obj(即传参)在函数内部被重写后，变成了指向本地对象的指针，这个本地对象在函数执行结束的时候就被销毁了；如果传参按引用传递，那应该打印出“Grey”而不是“nicholas”。</p><h3 id="_4-2-执行上下文与作用域" tabindex="-1"><a class="header-anchor" href="#_4-2-执行上下文与作用域" aria-hidden="true">#</a> 4.2 执行上下文与作用域</h3><p>执行上下文：全局上下文、函数上下文、块级上下文</p><p>代码执行流每流入一个新上下文，都会创建一个作用域链，用于搜索变量和函数</p><p>函数或块的局部上下文不仅可以访问自己作用域内的变量，而且也可以访问局部上下文、全局上下文中的变量</p><p>全局上下文只能访问全局上下文的变量和函数</p><p><strong>变量声明</strong></p><table><thead><tr><th></th><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>作用域</td><td>声明时，添加至最接近的上下文；未声明就初始化则添加至全局（严格模式报错）</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>重复声明</td><td>覆盖上一次声明</td><td>报错SyntaxError</td><td>报错</td></tr><tr><td>变量提升</td><td>可以提升</td><td>暂时性死区，声明前不可用变量</td><td>声明前不可用变量</td></tr><tr><td>初始化</td><td>不一定要</td><td>不一定要</td><td>必须初始化</td></tr><tr><td>赋值</td><td>可以赋值</td><td>可以赋值</td><td>初始化后不可再赋值，但是对象的键不限制。可用Object.freeze()避免对象变化</td></tr></tbody></table><p>尽可能多使用const声明，可以从根本上保证提前发现重新赋值导致的bug。JS运行时，编译器将实例转为实际值，不通过查询表进行变量查找，谷歌的V8引擎就执行了这种优化。</p><h3 id="_4-3-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_4-3-垃圾回收" aria-hidden="true">#</a> 4.3 垃圾回收</h3><p>垃圾回收程序必须跟踪记录变量是否还需使用，以便来回收内存。主要标记策略：标记清理、引用计数。</p><p><strong>标记清理</strong></p><p>先给当前不使用的值加上标记，再来回收内存。</p><p><strong>引用计数</strong></p><p>记录值被引用几次。但是该方法在循环引用时，由于引用数不会为0，所以这些内存不会被释放。</p><h4 id="解除引用" tabindex="-1"><a class="header-anchor" href="#解除引用" aria-hidden="true">#</a> 解除引用</h4><p>如果数据不再必要，把它设置为null，从而释放其引用。（适合全局变量和全局对象的属性）</p><h4 id="内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存泄漏" aria-hidden="true">#</a> 内存泄漏</h4><p>1、意外声明全局变量</p><p>2、定时器引用外部变量且不取消</p><p>3、不合理使用闭包</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">outer</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;jake&#39;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、获取一个 DOM 元素的引用，而后面这个元素被删除，由于我们一直保留了对这个元素的引用，所以它也无法被回收。</p>`,33),o=[p];function c(d,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","4-1.html.vue"]]);export{r as default};
