import{_ as n,o as a,c as s,b as e}from"./app-d147d0d6.js";const t={},p=e(`<h1 id="v-if和v-for同时使用问题" tabindex="-1"><a class="header-anchor" href="#v-if和v-for同时使用问题" aria-hidden="true">#</a> v-if和v-for同时使用问题</h1><p>在vue2的官方文档中提到了不推荐v-if和v-for同时使用，给出的解释是在两者中，v-for具有比v-if更高的优先级（vue2）。</p><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>
  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user in users<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.isActive<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.id<span class="token punctuation">&quot;</span></span>
 <span class="token punctuation">&gt;</span></span>
  {{ user.name }}
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 Vue 处理指令时，<code>v-for</code> 比 <code>v-if</code> 具有更高的优先级，因此上面的代码将会经过如下运算：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> user<span class="token punctuation">.</span>name
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不推荐使用原因" tabindex="-1"><a class="header-anchor" href="#不推荐使用原因" aria-hidden="true">#</a> 不推荐使用原因</h2><p>如果<code>v-for</code> 和 <code>v-if</code>同时使用， 会导致页面可能只要渲染一小部分用户的元素，但也会在每次重新渲染的时候遍历整个列表的情况。如果有1000个元素，但只有1个元素符合<code>v-if</code>的条件，最终只会渲染这个符合条件的元素，那么就浪费了999个<code>v-if</code>的计算。</p><h2 id="替代方法" tabindex="-1"><a class="header-anchor" href="#替代方法" aria-hidden="true">#</a> 替代方法</h2><h3 id="方法一" tabindex="-1"><a class="header-anchor" href="#方法一" aria-hidden="true">#</a> 方法一</h3><p>以上一个例子为例，将其更换为在一个计算属性上遍历：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>
  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user in activeUsers<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.id<span class="token punctuation">&quot;</span></span>
 <span class="token punctuation">&gt;</span></span>
  {{ user.name }}
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
 <span class="token function-variable function">activeUsers</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> user<span class="token punctuation">.</span>isActive
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h4><p>该方法在计算属性中将列表过滤，在<code>v-for</code>中直接使用过滤后的列表，更倾向于使用在当需要对数据进行复杂的处理或计算的情况，使用计算属性可以方便地将处理逻辑封装起来，使模板更加清晰简洁，并且计算属性在处理数据的同时能够提高页面性能。</p><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ul><li>过滤后的列表只会在 <code>users</code> 数组发生相关变化时才被重新运算，过滤更高效。</li><li>使用 <code>v-for=&quot;user in activeUsers&quot;</code> 之后，我们在渲染的时候只遍历符合条件的元素，渲染更高效。</li><li>将渲染页面的逻辑和业务逻辑分离开来，使它们彼此独立，可维护性 (对逻辑的更改和扩展) 更强。</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><ul><li>对于较大的数组，计算属性可能会影响性能。因为每当计算属性被访问时，都会重新遍历整个<code>users</code>数组。</li></ul><h3 id="方法二" tabindex="-1"><a class="header-anchor" href="#方法二" aria-hidden="true">#</a> 方法二</h3><p>通过将 <code>v-if</code> 移动到容器元素ul上，不会对列表中的每个元素检查是否符合<code>v-if</code>的条件，只需要检查容器元素是否符合展示条件，且不会在条件为否的时候运算 <code>v-for</code>。如果没有容器元素，则可以在外层嵌套<code>template</code>，在这层进行<code>v-if</code>的判断。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shouldShowUsers<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>
  <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user in users<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.id<span class="token punctuation">&quot;</span></span>
 <span class="token punctuation">/&gt;</span></span>
  {{ user.name }}
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="适用场景-1" tabindex="-1"><a class="header-anchor" href="#适用场景-1" aria-hidden="true">#</a> 适用场景</h4><p>该方法避免了渲染本应该被隐藏的列表。如果需要根据某个条件动态渲染一组元素时，可以使用<code>v-if</code>指令。</p><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1" aria-hidden="true">#</a> 优点</h4><ul><li>使用<code>v-if</code>指令可以更加灵活地控制元素的显示和隐藏，可以根据需要动态地添加或删除DOM元素。</li><li>在容器元素上使用<code>v-if</code>可以提高页面性能，因为只有在<code>shouldShowUsers</code>为<code>true</code>时才会渲染列表，而不是在每个列表项上都进行判断。</li></ul><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a> 缺点</h4><ul><li>在模板中嵌套过多的指令可能会使代码变得难以理解和维护。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>在vue2中，不要把<code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上，会带来性能上的浪费，即每次渲染都会先循环再进行条件的判断。</li><li>替代方法一，可通过计算属性<code>computed</code>提前过滤掉那些不需要显示的项来实现最终效果。</li><li>替代方法二，可通过在外层添加<code>v-if</code>判断，内部进行<code>v-for</code>循环的方法来实现最终效果。</li></ul>`,30),c=[p];function i(o,l){return a(),s("div",null,c)}const d=n(t,[["render",i],["__file","v-ifhev-fortongshishiyongdewenti.html.vue"]]);export{d as default};
